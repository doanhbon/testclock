[{"C:\\Users\\Admin\\Downloads\\my-app\\src\\countdown.js":"1","C:\\Users\\Admin\\Downloads\\my-app\\src\\clock.js":"2","C:\\Users\\Admin\\Downloads\\my-app\\src\\App.js":"3","C:\\Users\\Admin\\Downloads\\my-app\\src\\reportWebVitals.js":"4","C:\\Users\\Admin\\Downloads\\my-app\\src\\index.js":"5"},{"size":2765,"mtime":1609839845951,"results":"6","hashOfConfig":"7"},{"size":4786,"mtime":1609840056087,"results":"8","hashOfConfig":"7"},{"size":254,"mtime":1609840086244,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":1606548095622,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1606548095622,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"gp5izf",{"filePath":"15","messages":"16","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\Downloads\\my-app\\src\\countdown.js",["23","24"],"/* eslint-disable react/prop-types */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable no-shadow */\r\nimport React, { useState, useEffect } from 'react';\r\nimport ClockCountDown from './clock';\r\n\r\nconst convertSecondsToMinutes = secInput => {\r\n  if (secInput === 0 || secInput < 0) {\r\n    return {\r\n      _minutes: '00',\r\n      _seconds: '00'\r\n    };\r\n  }\r\n  let _secInput = secInput;\r\n  const _minutes =\r\n    parseInt(_secInput / 60, 10) < 10\r\n      ? `0${parseInt(_secInput / 60, 10)}`\r\n      : parseInt(_secInput / 60, 10);\r\n  // secondxs %= 60;\r\n  _secInput = parseInt(_secInput, 10) % 60;\r\n  const _seconds = _secInput < 10 ? `0${_secInput}` : _secInput;\r\n\r\n  return {\r\n    _minutes,\r\n    _seconds\r\n  };\r\n};\r\n\r\nconst Clock = props => {\r\n  const {\r\n    secondsInput,\r\n    widthInput,\r\n  } = props; \r\n\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [percent, setPercent] = useState(100);\r\n\r\n  const [startMoment] = useState(new Date().getTime());\r\n  // eslint-disable-next-line no-unused-vars\r\n\r\n  const calculateCurrentSecond = () => {\r\n    const result =\r\n      (secondsInput * 1000 - (new Date().getTime() - startMoment)) / 1000;\r\n    return result > 0 ? result : 0;\r\n  };\r\n\r\n  const currentSecond = calculateCurrentSecond();\r\n\r\n  const calculatePercent = fullSeconds => {\r\n    const result =\r\n      ((secondsInput * 1000 - (new Date().getTime() - startMoment)) /\r\n        1000 /\r\n        fullSeconds) *\r\n      100;\r\n    return result >= 0 ? result : 0;\r\n  };\r\n\r\n  const handleNumberWhenTimeChange = () => {\r\n    setMinutes(convertSecondsToMinutes(Math.ceil(currentSecond))._minutes);\r\n    setSeconds(convertSecondsToMinutes(Math.ceil(currentSecond))._seconds);\r\n    setPercent(calculatePercent(secondsInput));\r\n  };\r\n\r\n  const handleTimeCountDown = () => {\r\n    handleNumberWhenTimeChange();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setMinutes(convertSecondsToMinutes(Math.ceil(currentSecond))._minutes);\r\n    setSeconds(convertSecondsToMinutes(Math.ceil(currentSecond))._seconds);\r\n  }, [secondsInput]);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(\r\n      () => handleTimeCountDown(),\r\n      100\r\n    );\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [percent]);\r\n\r\n  return (\r\n    <ClockCountDown\r\n      width={widthInput}\r\n      percent={percent}\r\n      initPercent={100}\r\n      strokeColor='#52C41A'\r\n      text={`${minutes}:${seconds}`}\r\n    />\r\n  );\r\n\r\n  // return (\r\n  //   <Progress\r\n  //     width={widthInput}\r\n  //     className={`clock ${stateOfTime}`}\r\n  //     status=\"normal\"\r\n  //     percent={percent}\r\n  //     type=\"circle\"\r\n  //     strokeColor={color}\r\n  //     strokeLinecap=\"square\"\r\n  //     format={() => `${minutes}:${seconds}`}\r\n  //   />\r\n  // );\r\n};\r\n\r\nexport default Clock;\r\n","C:\\Users\\Admin\\Downloads\\my-app\\src\\clock.js",["25","26","27","28","29","30"],"C:\\Users\\Admin\\Downloads\\my-app\\src\\App.js",[],"C:\\Users\\Admin\\Downloads\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Downloads\\my-app\\src\\index.js",[],{"ruleId":"31","severity":1,"message":"32","line":72,"column":6,"nodeType":"33","endLine":72,"endColumn":20,"suggestions":"34"},{"ruleId":"31","severity":1,"message":"35","line":81,"column":6,"nodeType":"33","endLine":81,"endColumn":15,"suggestions":"36"},{"ruleId":"37","severity":1,"message":"38","line":57,"column":9,"nodeType":"39","messageId":"40","endLine":57,"endColumn":31},{"ruleId":"31","severity":1,"message":"41","line":67,"column":6,"nodeType":"33","endLine":67,"endColumn":48,"suggestions":"42"},{"ruleId":"37","severity":1,"message":"43","line":69,"column":9,"nodeType":"39","messageId":"40","endLine":69,"endColumn":29},{"ruleId":"37","severity":1,"message":"44","line":87,"column":9,"nodeType":"39","messageId":"40","endLine":87,"endColumn":32},{"ruleId":"37","severity":1,"message":"45","line":100,"column":9,"nodeType":"39","messageId":"40","endLine":100,"endColumn":20},{"ruleId":"31","severity":1,"message":"46","line":148,"column":3,"nodeType":"33","endLine":160,"endColumn":4,"suggestions":"47"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentSecond'. Either include it or remove the dependency array.","ArrayExpression",["48"],"React Hook useEffect has a missing dependency: 'handleTimeCountDown'. Either include it or remove the dependency array.",["49"],"no-unused-vars","'displayBackgroudStroke' is assigned a value but never used.","Identifier","unusedVar","React Hook useMemo has a missing dependency: 'describeArc'. Either include it or remove the dependency array.",["50"],"'displayPercentStroke' is assigned a value but never used.","'displayBackgroundCircle' is assigned a value but never used.","'displayText' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'colorStroke'. Either include it or remove the dependency array.",["51"],{"desc":"52","fix":"53"},{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},"Update the dependencies array to be: [currentSecond, secondsInput]",{"range":"60","text":"61"},"Update the dependencies array to be: [handleTimeCountDown, percent]",{"range":"62","text":"63"},"Update the dependencies array to be: [describeArc, cx, cy, radius, colorStroke, strokeWidth]",{"range":"64","text":"65"},"Update the dependencies array to be: [cx, cy, radius, width, percent, strokeColor, strokeWidth, text, textSize, textStrokeColor, textStrokeWidth, colorStroke]",{"range":"66","text":"67"},[2039,2053],"[currentSecond, secondsInput]",[2212,2221],"[handleTimeCountDown, percent]",[1547,1589],"[describeArc, cx, cy, radius, colorStroke, strokeWidth]",[3555,3723],"[cx, cy, radius, width, percent, strokeColor, strokeWidth, text, textSize, textStrokeColor, textStrokeWidth, colorStroke]"]