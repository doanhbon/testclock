[{"C:\\Users\\Admin\\Downloads\\my-app\\src\\countdown.js":"1","C:\\Users\\Admin\\Downloads\\my-app\\src\\clock.js":"2","C:\\Users\\Admin\\Downloads\\my-app\\src\\App.js":"3","C:\\Users\\Admin\\Downloads\\my-app\\src\\reportWebVitals.js":"4","C:\\Users\\Admin\\Downloads\\my-app\\src\\index.js":"5"},{"size":2765,"mtime":1609839845951,"results":"6","hashOfConfig":"7"},{"size":5189,"mtime":1609840880121,"results":"8","hashOfConfig":"7"},{"size":254,"mtime":1609840086244,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":1606548095622,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1606548095622,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"gp5izf",{"filePath":"15","messages":"16","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\Downloads\\my-app\\src\\countdown.js",["24","25"],"/* eslint-disable react/prop-types */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable no-shadow */\r\nimport React, { useState, useEffect } from 'react';\r\nimport ClockCountDown from './clock';\r\n\r\nconst convertSecondsToMinutes = secInput => {\r\n  if (secInput === 0 || secInput < 0) {\r\n    return {\r\n      _minutes: '00',\r\n      _seconds: '00'\r\n    };\r\n  }\r\n  let _secInput = secInput;\r\n  const _minutes =\r\n    parseInt(_secInput / 60, 10) < 10\r\n      ? `0${parseInt(_secInput / 60, 10)}`\r\n      : parseInt(_secInput / 60, 10);\r\n  // secondxs %= 60;\r\n  _secInput = parseInt(_secInput, 10) % 60;\r\n  const _seconds = _secInput < 10 ? `0${_secInput}` : _secInput;\r\n\r\n  return {\r\n    _minutes,\r\n    _seconds\r\n  };\r\n};\r\n\r\nconst Clock = props => {\r\n  const {\r\n    secondsInput,\r\n    widthInput,\r\n  } = props; \r\n\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [percent, setPercent] = useState(100);\r\n\r\n  const [startMoment] = useState(new Date().getTime());\r\n  // eslint-disable-next-line no-unused-vars\r\n\r\n  const calculateCurrentSecond = () => {\r\n    const result =\r\n      (secondsInput * 1000 - (new Date().getTime() - startMoment)) / 1000;\r\n    return result > 0 ? result : 0;\r\n  };\r\n\r\n  const currentSecond = calculateCurrentSecond();\r\n\r\n  const calculatePercent = fullSeconds => {\r\n    const result =\r\n      ((secondsInput * 1000 - (new Date().getTime() - startMoment)) /\r\n        1000 /\r\n        fullSeconds) *\r\n      100;\r\n    return result >= 0 ? result : 0;\r\n  };\r\n\r\n  const handleNumberWhenTimeChange = () => {\r\n    setMinutes(convertSecondsToMinutes(Math.ceil(currentSecond))._minutes);\r\n    setSeconds(convertSecondsToMinutes(Math.ceil(currentSecond))._seconds);\r\n    setPercent(calculatePercent(secondsInput));\r\n  };\r\n\r\n  const handleTimeCountDown = () => {\r\n    handleNumberWhenTimeChange();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setMinutes(convertSecondsToMinutes(Math.ceil(currentSecond))._minutes);\r\n    setSeconds(convertSecondsToMinutes(Math.ceil(currentSecond))._seconds);\r\n  }, [secondsInput]);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(\r\n      () => handleTimeCountDown(),\r\n      100\r\n    );\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [percent]);\r\n\r\n  return (\r\n    <ClockCountDown\r\n      width={widthInput}\r\n      percent={percent}\r\n      initPercent={100}\r\n      strokeColor='#52C41A'\r\n      text={`${minutes}:${seconds}`}\r\n    />\r\n  );\r\n\r\n  // return (\r\n  //   <Progress\r\n  //     width={widthInput}\r\n  //     className={`clock ${stateOfTime}`}\r\n  //     status=\"normal\"\r\n  //     percent={percent}\r\n  //     type=\"circle\"\r\n  //     strokeColor={color}\r\n  //     strokeLinecap=\"square\"\r\n  //     format={() => `${minutes}:${seconds}`}\r\n  //   />\r\n  // );\r\n};\r\n\r\nexport default Clock;\r\n","C:\\Users\\Admin\\Downloads\\my-app\\src\\clock.js",["26","27","28","29","30"],"import React, { useMemo, useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Clock = props => {\r\n  const {\r\n    strokeColor,\r\n    width,\r\n    percent,\r\n    text,\r\n    initPercent,\r\n    colorStroke,\r\n    strokeWidth,\r\n    backgroundClock,\r\n    textColor,\r\n    textStrokeColor,\r\n    textSize,\r\n    textStrokeWidth\r\n  } = props;\r\n  const canvasRef = useRef();\r\n\r\n  // const polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {\r\n  //   const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\r\n\r\n  //   return {\r\n  //     x: centerX + radius * Math.cos(angleInRadians),\r\n  //     y: centerY + radius * Math.sin(angleInRadians)\r\n  //   };\r\n  // };\r\n\r\n  // const describeArc = (x, y, radius, startAngle, endAngle) => {\r\n  //   const start = polarToCartesian(x, y, radius, endAngle);\r\n  //   const end = polarToCartesian(x, y, radius, startAngle);\r\n\r\n  //   const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\r\n\r\n  //   const d = [\r\n  //     'M',\r\n  //     start.x,\r\n  //     start.y,\r\n  //     'A',\r\n  //     radius,\r\n  //     radius,\r\n  //     0,\r\n  //     largeArcFlag,\r\n  //     0,\r\n  //     end.x,\r\n  //     end.y\r\n  //   ].join(' ');\r\n\r\n  //   return d;\r\n  // };\r\n\r\n  const [cx] = useState(width * 0.5);\r\n  const [cy] = useState(width * 0.5);\r\n  const [radius] = useState((width * 0.8) / 2);\r\n\r\n  // const displayBackgroudStroke = useMemo(() => {\r\n  //   return (\r\n  //     <path\r\n  //       id=\"arc1\"\r\n  //       d={describeArc(cx, cy, radius, 0, 359.9999)}\r\n  //       fill=\"none\"\r\n  //       stroke={colorStroke}\r\n  //       strokeWidth={strokeWidth}\r\n  //     />\r\n  //   );\r\n  // }, [cx, cy, radius, colorStroke, strokeWidth]);\r\n\r\n  // const displayPercentStroke = () => {\r\n  //   return (\r\n  //     <path\r\n  //       id=\"arc1\"\r\n  //       d={describeArc(\r\n  //         cx,\r\n  //         cy,\r\n  //         radius,\r\n  //         0,\r\n  //         percent !== initPercent ? (360 / initPercent) * percent : 359.9999\r\n  //       )}\r\n  //       fill=\"none\"\r\n  //       stroke={strokeColor}\r\n  //       strokeWidth={strokeWidth}\r\n  //     />\r\n  //   );\r\n  // };\r\n\r\n  // const displayBackgroundCircle = useMemo(() => {\r\n  //   return (\r\n  //     <circle\r\n  //       cx={cx}\r\n  //       cy={cy}\r\n  //       r={radius}\r\n  //       stroke=\"none\"\r\n  //       strokeWidth=\"0\"\r\n  //       fill={backgroundClock}\r\n  //     />\r\n  //   );\r\n  // }, [cx, cy, radius, backgroundClock]);\r\n\r\n  // const displayText = () => {\r\n  //   return (\r\n  //     <text\r\n  //       x={cx}\r\n  //       y={cy}\r\n  //       fill={textColor}\r\n  //       stroke={textStrokeColor}\r\n  //       dominantBaseline=\"middle\"\r\n  //       textAnchor=\"middle\"\r\n  //       fontWeight=\"bold\"\r\n  //       fontSize={textSize}\r\n  //       strokeWidth={textStrokeWidth}\r\n  //     >\r\n  //       {text}\r\n  //     </text>\r\n  //   );\r\n  // };\r\n\r\n  useEffect(() => {\r\n    console.log('percent canvas = ', percent);\r\n    // var canvas = document.getElementById(\"clockCanvas\");\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, width, width);\r\n    ctx.lineWidth = strokeWidth;\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(cx, cy, radius, 0, 2 * Math.PI);\r\n    ctx.fillStyle = backgroundClock;\r\n    ctx.fill();\r\n    ctx.closePath();\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(cx, cy, radius, 0, 2 * Math.PI);\r\n    ctx.strokeStyle = colorStroke;\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(cx, cy, radius, -0.5 * Math.PI + (2 * (percent / 100) * Math.PI), - 0.5 * Math.PI, true);\r\n    ctx.strokeStyle = strokeColor;\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    ctx.beginPath();\r\n    ctx.lineWidth = textStrokeWidth;\r\n    ctx.strokeStyle = textStrokeColor;\r\n    ctx.font = `${textSize}px Roboto`;\r\n    ctx.textAlign = \"center\";\r\n    ctx.textBaseline = 'middle';\r\n    ctx.strokeText(text, width / 2, width / 2, width - 2 * strokeWidth);\r\n    ctx.closePath();\r\n\r\n  }, \r\n  [\r\n    cx,\r\n    cy,\r\n    radius,\r\n    width,\r\n    percent,\r\n    strokeColor,\r\n    strokeWidth,\r\n    text,\r\n    textSize,\r\n    textStrokeColor,\r\n    textStrokeWidth\r\n  ]);\r\n  // {displayBackgroudStroke}\r\n  // {displayPercentStroke()}\r\n  // {displayBackgroundCircle}\r\n  // {displayText()}\r\n  return (\r\n    <canvas id=\"clockCanvas\" width={width} height={width} ref={canvasRef}>\r\n      \r\n    </canvas>\r\n  );\r\n};\r\n\r\nexport default Clock;\r\n\r\n// const { strokeColor, width, percent, text, initPercent } = props;\r\n\r\nClock.propTypes = {\r\n  strokeColor: PropTypes.string,\r\n  width: PropTypes.number,\r\n  percent: PropTypes.number,\r\n  initPercent: PropTypes.number,\r\n  text: PropTypes.string,\r\n  colorStroke: PropTypes.string,\r\n  strokeWidth: PropTypes.number,\r\n  backgroundClock: PropTypes.string,\r\n  textColor: PropTypes.string,\r\n  textSize: PropTypes.number,\r\n  textStrokeColor: PropTypes.string,\r\n  textStrokeWidth: PropTypes.number\r\n};\r\n\r\nClock.defaultProps = {\r\n  strokeColor: '#000000',\r\n  width: 200,\r\n  percent: 100,\r\n  initPercent: 100,\r\n  text: 'Clock',\r\n  colorStroke: '#EEEEEE',\r\n  strokeWidth: 10,\r\n  backgroundClock: '#FFFFFF',\r\n  textColor: '#FFFFFF',\r\n  textSize: 20,\r\n  textStrokeColor: '#000000',\r\n  textStrokeWidth: 2\r\n};\r\n","C:\\Users\\Admin\\Downloads\\my-app\\src\\App.js",[],"C:\\Users\\Admin\\Downloads\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Downloads\\my-app\\src\\index.js",[],{"ruleId":"31","severity":1,"message":"32","line":72,"column":6,"nodeType":"33","endLine":72,"endColumn":20,"suggestions":"34"},{"ruleId":"31","severity":1,"message":"35","line":81,"column":6,"nodeType":"33","endLine":81,"endColumn":15,"suggestions":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":17,"nodeType":"39","messageId":"40","endLine":1,"endColumn":24},{"ruleId":"37","severity":1,"message":"41","line":10,"column":5,"nodeType":"39","messageId":"40","endLine":10,"endColumn":16},{"ruleId":"37","severity":1,"message":"42","line":14,"column":5,"nodeType":"39","messageId":"40","endLine":14,"endColumn":14},{"ruleId":"37","severity":1,"message":"43","line":21,"column":9,"nodeType":"39","messageId":"40","endLine":21,"endColumn":25},{"ruleId":"31","severity":1,"message":"44","line":154,"column":3,"nodeType":"33","endLine":166,"endColumn":4,"suggestions":"45"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentSecond'. Either include it or remove the dependency array.","ArrayExpression",["46"],"React Hook useEffect has a missing dependency: 'handleTimeCountDown'. Either include it or remove the dependency array.",["47"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'initPercent' is assigned a value but never used.","'textColor' is assigned a value but never used.","'polarToCartesian' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'backgroundClock' and 'colorStroke'. Either include them or remove the dependency array.",["48"],{"desc":"49","fix":"50"},{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},"Update the dependencies array to be: [currentSecond, secondsInput]",{"range":"55","text":"56"},"Update the dependencies array to be: [handleTimeCountDown, percent]",{"range":"57","text":"58"},"Update the dependencies array to be: [cx, cy, radius, width, percent, strokeColor, strokeWidth, text, textSize, textStrokeColor, textStrokeWidth, backgroundClock, colorStroke]",{"range":"59","text":"60"},[2039,2053],"[currentSecond, secondsInput]",[2212,2221],"[handleTimeCountDown, percent]",[3937,4105],"[cx, cy, radius, width, percent, strokeColor, strokeWidth, text, textSize, textStrokeColor, textStrokeWidth, backgroundClock, colorStroke]"]