[{"C:\\Users\\Admin\\Downloads\\my-app\\src\\countdown.js":"1","C:\\Users\\Admin\\Downloads\\my-app\\src\\clock.js":"2","C:\\Users\\Admin\\Downloads\\my-app\\src\\App.js":"3","C:\\Users\\Admin\\Downloads\\my-app\\src\\reportWebVitals.js":"4","C:\\Users\\Admin\\Downloads\\my-app\\src\\index.js":"5"},{"size":2776,"mtime":1609851899557,"results":"6","hashOfConfig":"7"},{"size":5237,"mtime":1609851949024,"results":"8","hashOfConfig":"7"},{"size":254,"mtime":1609840086244,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":1606548095622,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1606548095622,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"gp5izf",{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\Downloads\\my-app\\src\\countdown.js",["23","24"],"C:\\Users\\Admin\\Downloads\\my-app\\src\\clock.js",["25","26","27","28"],"import React, { useMemo, useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Clock = props => {\r\n  const {\r\n    strokeColor,\r\n    width,\r\n    percent,\r\n    text,\r\n    initPercent,\r\n    colorStroke,\r\n    strokeWidth,\r\n    backgroundClock,\r\n    textColor,\r\n    textStrokeColor,\r\n    textSize,\r\n    textStrokeWidth\r\n  } = props;\r\n  const canvasRef = useRef();\r\n\r\n  // const polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {\r\n  //   const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\r\n\r\n  //   return {\r\n  //     x: centerX + radius * Math.cos(angleInRadians),\r\n  //     y: centerY + radius * Math.sin(angleInRadians)\r\n  //   };\r\n  // };\r\n\r\n  // const describeArc = (x, y, radius, startAngle, endAngle) => {\r\n  //   const start = polarToCartesian(x, y, radius, endAngle);\r\n  //   const end = polarToCartesian(x, y, radius, startAngle);\r\n\r\n  //   const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\r\n\r\n  //   const d = [\r\n  //     'M',\r\n  //     start.x,\r\n  //     start.y,\r\n  //     'A',\r\n  //     radius,\r\n  //     radius,\r\n  //     0,\r\n  //     largeArcFlag,\r\n  //     0,\r\n  //     end.x,\r\n  //     end.y\r\n  //   ].join(' ');\r\n\r\n  //   return d;\r\n  // };\r\n\r\n  const [cx] = useState(width * 0.5);\r\n  const [cy] = useState(width * 0.5);\r\n  const [radius] = useState((width * 0.8) / 2);\r\n\r\n  // const displayBackgroudStroke = useMemo(() => {\r\n  //   return (\r\n  //     <path\r\n  //       id=\"arc1\"\r\n  //       d={describeArc(cx, cy, radius, 0, 359.9999)}\r\n  //       fill=\"none\"\r\n  //       stroke={colorStroke}\r\n  //       strokeWidth={strokeWidth}\r\n  //     />\r\n  //   );\r\n  // }, [cx, cy, radius, colorStroke, strokeWidth]);\r\n\r\n  // const displayPercentStroke = () => {\r\n  //   return (\r\n  //     <path\r\n  //       id=\"arc1\"\r\n  //       d={describeArc(\r\n  //         cx,\r\n  //         cy,\r\n  //         radius,\r\n  //         0,\r\n  //         percent !== initPercent ? (360 / initPercent) * percent : 359.9999\r\n  //       )}\r\n  //       fill=\"none\"\r\n  //       stroke={strokeColor}\r\n  //       strokeWidth={strokeWidth}\r\n  //     />\r\n  //   );\r\n  // };\r\n\r\n  // const displayBackgroundCircle = useMemo(() => {\r\n  //   return (\r\n  //     <circle\r\n  //       cx={cx}\r\n  //       cy={cy}\r\n  //       r={radius}\r\n  //       stroke=\"none\"\r\n  //       strokeWidth=\"0\"\r\n  //       fill={backgroundClock}\r\n  //     />\r\n  //   );\r\n  // }, [cx, cy, radius, backgroundClock]);\r\n\r\n  // const displayText = () => {\r\n  //   return (\r\n  //     <text\r\n  //       x={cx}\r\n  //       y={cy}\r\n  //       fill={textColor}\r\n  //       stroke={textStrokeColor}\r\n  //       dominantBaseline=\"middle\"\r\n  //       textAnchor=\"middle\"\r\n  //       fontWeight=\"bold\"\r\n  //       fontSize={textSize}\r\n  //       strokeWidth={textStrokeWidth}\r\n  //     >\r\n  //       {text}\r\n  //     </text>\r\n  //   );\r\n  // };\r\n\r\n  useEffect(() => {\r\n    console.log('percent key canvas = ', percent);\r\n    // var canvas = document.getElementById(\"clockCanvas\");\r\n    const canvas = document.getElementById('clockCanvas'); //canvasRef.current;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, width, width);\r\n    ctx.lineWidth = strokeWidth;\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(cx, cy, radius, 0, 2 * Math.PI);\r\n    ctx.fillStyle = backgroundClock;\r\n    ctx.fill();\r\n    ctx.closePath();\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(cx, cy, radius, 0, 2 * Math.PI);\r\n    ctx.strokeStyle = colorStroke;\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(cx, cy, radius, -0.5 * Math.PI + (2 * (percent / 100) * Math.PI), - 0.5 * Math.PI, true);\r\n    ctx.strokeStyle = strokeColor;\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    ctx.beginPath();\r\n    ctx.lineWidth = textStrokeWidth;\r\n    ctx.strokeStyle = textStrokeColor;\r\n    ctx.font = `${textSize}px Roboto`;\r\n    ctx.textAlign = \"center\";\r\n    ctx.textBaseline = 'middle';\r\n    ctx.strokeText(text, width / 2, width / 2, width - 2 * strokeWidth);\r\n    ctx.closePath();\r\n\r\n  }, \r\n  [\r\n    cx,\r\n    cy,\r\n    radius,\r\n    width,\r\n    percent,\r\n    strokeColor,\r\n    strokeWidth,\r\n    text,\r\n    textSize,\r\n    textStrokeColor,\r\n    textStrokeWidth\r\n  ]);\r\n  // {displayBackgroudStroke}\r\n  // {displayPercentStroke()}\r\n  // {displayBackgroundCircle}\r\n  // {displayText()}\r\n  return (\r\n    <canvas id=\"clockCanvas\" width={width} height={width} ref={canvasRef}>\r\n      \r\n    </canvas>\r\n  );\r\n};\r\n\r\nexport default Clock;\r\n\r\n// const { strokeColor, width, percent, text, initPercent } = props;\r\n\r\nClock.propTypes = {\r\n  strokeColor: PropTypes.string,\r\n  width: PropTypes.number,\r\n  percent: PropTypes.number,\r\n  initPercent: PropTypes.number,\r\n  text: PropTypes.string,\r\n  colorStroke: PropTypes.string,\r\n  strokeWidth: PropTypes.number,\r\n  backgroundClock: PropTypes.string,\r\n  textColor: PropTypes.string,\r\n  textSize: PropTypes.number,\r\n  textStrokeColor: PropTypes.string,\r\n  textStrokeWidth: PropTypes.number\r\n};\r\n\r\nClock.defaultProps = {\r\n  strokeColor: '#000000',\r\n  width: 200,\r\n  percent: 100,\r\n  initPercent: 100,\r\n  text: 'Clock',\r\n  colorStroke: '#EEEEEE',\r\n  strokeWidth: 10,\r\n  backgroundClock: '#FFFFFF',\r\n  textColor: '#FFFFFF',\r\n  textSize: 20,\r\n  textStrokeColor: '#000000',\r\n  textStrokeWidth: 2\r\n};\r\n","C:\\Users\\Admin\\Downloads\\my-app\\src\\App.js",[],"C:\\Users\\Admin\\Downloads\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Downloads\\my-app\\src\\index.js",[],{"ruleId":"29","severity":1,"message":"30","line":72,"column":6,"nodeType":"31","endLine":72,"endColumn":20,"suggestions":"32"},{"ruleId":"29","severity":1,"message":"33","line":81,"column":6,"nodeType":"31","endLine":81,"endColumn":15,"suggestions":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":17,"nodeType":"37","messageId":"38","endLine":1,"endColumn":24},{"ruleId":"35","severity":1,"message":"39","line":10,"column":5,"nodeType":"37","messageId":"38","endLine":10,"endColumn":16},{"ruleId":"35","severity":1,"message":"40","line":14,"column":5,"nodeType":"37","messageId":"38","endLine":14,"endColumn":14},{"ruleId":"29","severity":1,"message":"41","line":155,"column":3,"nodeType":"31","endLine":167,"endColumn":4,"suggestions":"42"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentSecond'. Either include it or remove the dependency array.","ArrayExpression",["43"],"React Hook useEffect has a missing dependency: 'handleTimeCountDown'. Either include it or remove the dependency array.",["44"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'initPercent' is assigned a value but never used.","'textColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'backgroundClock' and 'colorStroke'. Either include them or remove the dependency array.",["45"],{"desc":"46","fix":"47"},{"desc":"48","fix":"49"},{"desc":"50","fix":"51"},"Update the dependencies array to be: [currentSecond, secondsInput]",{"range":"52","text":"53"},"Update the dependencies array to be: [handleTimeCountDown, percent]",{"range":"54","text":"55"},"Update the dependencies array to be: [cx, cy, radius, width, percent, strokeColor, strokeWidth, text, textSize, textStrokeColor, textStrokeWidth, backgroundClock, colorStroke]",{"range":"56","text":"57"},[2050,2064],"[currentSecond, secondsInput]",[2223,2232],"[handleTimeCountDown, percent]",[4006,4174],"[cx, cy, radius, width, percent, strokeColor, strokeWidth, text, textSize, textStrokeColor, textStrokeWidth, backgroundClock, colorStroke]"]